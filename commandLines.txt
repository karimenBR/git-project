### 1. **Setting Up Git**
   - **`git config --global user.name "Your Name"`**
     - Sets your Git username for all repositories on your machine.
   - **`git config --global user.email "youremail@example.com"`**
     - Sets your Git email for all repositories on your machine.
   - **`git config --global color.ui auto`**
     - Enables colored output in the terminal to make it easier to read Git commands.
   - **`git config --list`**
     - Lists all configuration settings.

### 2. **Initializing a Repository**
   - **`git init`**
     - Initializes a new Git repository in the current directory.

### 3. **Cloning a Repository**
   - **`git clone <repository-url>`**
     - Creates a copy of an existing repository on your local machine.

### 4. **Basic Workflow**
   - **`git status`**
     - Shows the status of changes in your working directory.
   - **`git add <file>`**
     - Stages a file for the next commit.
   - **`git add .`**
     - Stages all changed files in the current directory and its subdirectories.
   - **`git commit -m "Commit message"`**
     - Commits the staged changes to the repository with a message.
   - **`git commit -am "Commit message"`**
     - Stages and commits all tracked files that have been modified or deleted, skipping the `git add` step.

### 5. **Branching**
   - **`git branch`**
     - Lists all branches in the repository and shows the current branch.
   - **`git branch <branch-name>`**
     - Creates a new branch.
   - **`git checkout <branch-name>`**
     - Switches to the specified branch.
   - **`git checkout -b <branch-name>`**
     - Creates a new branch and switches to it immediately.
   - **`git merge <branch-name>`**
     - Merges the specified branch into the current branch.

### 6. **Remote Repositories**
   - **`git remote add origin <repository-url>`**
     - Adds a remote repository and names it "origin."
   - **`git remote -v`**
     - Displays the remote repositories associated with your local repository.
   - **`git push origin <branch-name>`**
     - Pushes changes from the specified branch to the remote repository.
   - **`git push -u origin <branch-name>`**
     - Pushes the branch and sets it to track the remote branch, so future pushes can be done with just `git push`.
   - **`git pull`**
     - Fetches and merges changes from the remote repository into your current branch.
   - **`git fetch`**
     - Downloads objects and references from another repository.

### 7. **Stashing**
   - **`git stash`**
     - Temporarily saves changes that you don't want to commit immediately, allowing you to work on something else.
   - **`git stash apply`**
     - Re-applies the stashed changes to your working directory.
   - **`git stash pop`**
     - Applies the stashed changes and removes them from the stash list.
   - **`git stash list`**
     - Lists all stashed changes.

### 8. **Rebasing**
   - **`git rebase <branch-name>`**
     - Re-applies commits from your current branch on top of another branch, effectively moving your changes to a new base.

### 9. **Undoing Changes**
   - **`git reset <file>`**
     - Unstages a file that has been added to the staging area.
   - **`git reset --soft <commit-hash>`**
     - Moves the HEAD to the specified commit, keeping changes in the staging area.
   - **`git reset --hard <commit-hash>`**
     - Resets the repository to the specified commit, removing all changes in the working directory and staging area.
   - **`git checkout -- <file>`**
     - Discards changes in the working directory for a specific file.

### 10. **Viewing History**
   - **`git log`**
     - Shows the commit history for the current branch.
   - **`git log --oneline`**
     - Displays the commit history in a condensed format.
   - **`git diff`**
     - Shows the differences between your working directory and the staging area.
   - **`git diff <branch1>..<branch2>`**
     - Shows the differences between two branches.

### 11. **Tagging**
   - **`git tag <tag-name>`**
     - Creates a tag at the current commit.
   - **`git tag -a <tag-name> -m "Tag message"`**
     - Creates an annotated tag with a message.
   - **`git push origin <tag-name>`**
     - Pushes a tag to the remote repository.

### 12. **Collaborating with Others**
   - **`git pull origin <branch-name>`**
     - Fetches and merges changes from the specified branch on the remote repository.
   - **`git rebase origin/<branch-name>`**
     - Rebases your current branch on top of the specified branch from the remote repository, useful for integrating upstream changes.
   - **`git cherry-pick <commit-hash>`**
     - Applies a specific commit from another branch into your current branch.

### 13. **Deleting Branches**
   - **`git branch -d <branch-name>`**
     - Deletes the specified branch (only if it's been merged).
   - **`git branch -D <branch-name>`**
     - Forcefully deletes the branch, even if it hasn't been merged.

### 14. **GitHub-Specific Commands**
   - **`gh repo create`**
     - Creates a new repository on GitHub and clones it locally.
   - **`gh repo clone <repository>`**
     - Clones a GitHub repository.
   - **`gh issue create`**
     - Opens a new issue in a GitHub repository.
   - **`gh pr create`**
     - Opens a new pull request in a GitHub repository.

